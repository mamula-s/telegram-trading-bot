// src/services/botService.js
const TelegramBot = require('node-telegram-bot-api');
const userService = require('./userService');
const { formatMessage } = require('../utils/messageFormatter');

class BotService {
  constructor() {
    this.bot = new TelegramBot(process.env.BOT_TOKEN);
  }

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–∞—Å–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
  async broadcastMessage(message, options = {}) {
    const {
      userFilter = {},
      parseMode = 'HTML',
      silent = false
    } = options;

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ñ—ñ–ª—å—Ç—Ä–æ–º
      const users = await userService.getFilteredUsers(userFilter);
      const results = {
        total: users.length,
        success: 0,
        failed: 0,
        errors: []
      };

      for (const user of users) {
        try {
          await this.bot.sendMessage(user.telegramId, message, {
            parse_mode: parseMode,
            disable_notification: silent
          });
          results.success++;
        } catch (error) {
          results.failed++;
          results.errors.push({
            userId: user.telegramId,
            error: error.message
          });
        }
      }

      return results;
    } catch (error) {
      console.error('Broadcast error:', error);
      throw error;
    }
  }

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª—É
  async broadcastSignal(signal, options = {}) {
    const {
      subscriptionType = 'all',
      notifyAll = false
    } = options;

    try {
      const users = await userService.getSubscribedUsers(subscriptionType);
      const message = formatMessage('signal', signal);

      const results = await this.broadcastMessage(message, {
        userFilter: {
          isSubscribed: true,
          subscriptionType: notifyAll ? undefined : subscriptionType
        },
        parseMode: 'HTML'
      });

      return results;
    } catch (error) {
      console.error('Signal broadcast error:', error);
      throw error;
    }
  }

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–∏–Ω
  async broadcastNews(news) {
    try {
      const message = formatMessage('news', news);
      return await this.broadcastMessage(message, {
        parseMode: 'HTML',
        silent: true
      });
    } catch (error) {
      console.error('News broadcast error:', error);
      throw error;
    }
  }

  // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async blockUser(userId, reason) {
    try {
      await this.bot.sendMessage(userId, 
        `‚ö†Ô∏è –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è.`
      );
      return true;
    } catch (error) {
      console.error('Error blocking user:', error);
      throw error;
    }
  }

  // –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async unblockUser(userId) {
    try {
      await this.bot.sendMessage(userId,
        '‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ. –í–∏ –∑–Ω–æ–≤—É –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.'
      );
      return true;
    } catch (error) {
      console.error('Error unblocking user:', error);
      throw error;
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–∞—Ç/–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async getChatInfo(chatId) {
    try {
      return await this.bot.getChat(chatId);
    } catch (error) {
      console.error('Error getting chat info:', error);
      throw error;
    }
  }

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
  async notifyAdmins(message, type = 'info') {
    try {
      const adminIds = process.env.ADMIN_IDS.split(',');
      const icon = {
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è',
        error: 'üö®',
        success: '‚úÖ'
      }[type] || '‚ÑπÔ∏è';

      for (const adminId of adminIds) {
        await this.bot.sendMessage(adminId, `${icon} ${message}`);
      }
    } catch (error) {
      console.error('Error notifying admins:', error);
    }
  }
}

module.exports = new BotService();