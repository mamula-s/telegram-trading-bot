const TelegramBot = require('node-telegram-bot-api');
const userService = require('./userService');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });

const sendSignalToUsers = async (signal) => {
  try {
    const users = await userService.getSubscribedUsers();
    const message = formatSignalMessage(signal);

    for (const user of users) {
      try {
        if (signal.imageUrl) {
          await bot.sendPhoto(user.telegramId, `${process.env.BASE_URL}${signal.imageUrl}`, { 
            caption: message, 
            parse_mode: 'Markdown' 
          });
        } else {
          await bot.sendMessage(user.telegramId, message, { parse_mode: 'Markdown' });
        }
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.telegramId}:`, error);
      }
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:', error);
    throw error;
  }
};

const formatSignalMessage = (signal) => {
  return `
üö® *–ù–æ–≤–∏–π ${signal.type === 'futures' ? "—Ñ'—é—á–µ—Ä—Å–Ω–∏–π" : '—Å–ø–æ—Ç–æ–≤–∏–π'} —Å–∏–≥–Ω–∞–ª* üö®

–ü–∞—Ä–∞: *${signal.pair}*
–ù–∞–ø—Ä—è–º–æ–∫: *${signal.direction === 'buy' ? '–ö—É–ø—ñ–≤–ª—è' : '–ü—Ä–æ–¥–∞–∂'}*
–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: *${signal.entryPrice}*
–¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç: *${signal.takeProfit}*
–°—Ç–æ–ø-–ª–æ—Å—Å: *${signal.stopLoss}*

${signal.note ? `–ü—Ä–∏–º—ñ—Ç–∫–∞: ${signal.note}\n` : ''}

*–†–∏–∑–∏–∫ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:*
–í—Ö—ñ–¥ –¥–æ —É–≥–æ–¥–∏ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 3-5% –≤—ñ–¥ –≤–∞—à–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—É.

_–ú–∏ –Ω–µ –Ω–µ—Å–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç. –í–∏ —Å–∞–º—ñ —É—Ö–≤–∞–ª—é—î—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —É–≥–æ–¥—É —á–∏ –Ω—ñ. –ú–∏ –º–æ–∂–µ–º–æ –ª–∏—à–µ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥—ñ–≤–ª—ñ._

–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ —ñ —Ç–æ—Ä–≥—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ!
  `;
};

module.exports = {
  sendSignalToUsers
};